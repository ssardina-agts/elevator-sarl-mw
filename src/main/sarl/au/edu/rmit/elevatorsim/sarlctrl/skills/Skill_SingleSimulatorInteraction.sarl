/**
 * 
 */
package au.edu.rmit.elevatorsim.sarlctrl.skills

import au.edu.rmit.elevatorsim.sarlctrl.capacities.Cap_SimulatorInteraction

import au.edu.rmit.elevatorsim.sarlctrl.events.CarArrivedPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.CarPassedFloorPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.CarRequestPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.DoorClosedPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.DoorOpenedPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.DoorSensorClearedPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.FloorRequestPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.ModelChangePercept
import au.edu.rmit.elevatorsim.sarlctrl.events.PersonEnteredPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.PersonExitedPercept
import au.edu.rmit.elevatorsim.sarlctrl.events.SendCarAction
import au.edu.rmit.elevatorsim.net.ClientElevatorSimulator
import au.edu.rmit.elevatorsim.net.ModelHolder
import au.edu.rmit.elevatorsim.net.NetworkConnection

import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace

import java.io.IOException

/**
 * Allows for basic/general interactions
 * with the Elevator Simulator
 * This includes translating the outputs of the
 * JSON based ClientElevatorSimulator into SARL events,
 * and allowing for the submission of actions
 * for processing by the Elevator Simulator
 * @author Matthew McNally
 */
skill Skill_SingleSimulatorInteraction extends ClientElevatorSimulator
    implements Cap_SimulatorInteraction
{
    uses Logging
    
    private var agentSpace : EventSpace
	protected var host : String
	protected var port : int

    public new(host : String, port : int, agentSpace : EventSpace)
        throws IOException
    {
		super(null)
		this.host = host
		this.port = port
		this.agentSpace = agentSpace
	}

	/*
	 * Implementation of actions
	 */
	def act_connectToSimulator(address : String, port : int) {
		this.host = host
		this.port = port
		act_connectToSimulator()
	}

	def act_connectToSimulator() {
		registerConnection(new NetworkConnection(this.host, this.port))
		this.start()
	}

	def sendCar(action : SendCarAction) {
		try {
			sendCar(action.car, action.floor, action.nextDirection.name, null, null)
		} catch (e : IOException) {
			error("Failed to enact given simulator action ('SendCar')")
        }
    }








	/*
	 * The following calls back emit corresponding SARL events for each network message received from simulator
	 * 
	 * Each of the methods below is called after receiving and decoding a JSON message from simulator 
	 */
    protected override onModelChanged(id : int, time : long, newModel : ModelHolder) 
        throws IOException {
        agentSpace.emit(new ModelChangePercept(time, id, newModel))
    }

    protected override onCarRequested(id : int, time : long, floor : int, 
        direction : String) throws IOException
    {
        agentSpace.emit(new CarRequestPercept(time, id, floor, direction))
    }

    protected override onDoorOpened(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        agentSpace.emit(new DoorOpenedPercept(time, id, car, floor))
    }

    protected override onDoorClosed(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        agentSpace.emit(new DoorClosedPercept(time, id, car, floor))
    }

    protected override onDoorSensorClear(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        agentSpace.emit(new DoorSensorClearedPercept(time, id, car, floor))
    }
    
    protected override onCarArrived(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        agentSpace.emit(new CarArrivedPercept(time, id, car, floor))
    }

    protected override onPersonEnteredCar(id : int, time : long, car : int) 
        throws IOException
    {
        agentSpace.emit(new PersonEnteredPercept(time, id, car))
    }

    protected override onPersonLeftCar(id : int, time : long, car : int) 
        throws IOException
    {
        agentSpace.emit(new PersonExitedPercept(time, id, car))
    }

    protected override onFloorPassed(id : int, time : long, floor : int,
        car : int) throws IOException 
    {
        agentSpace.emit(new CarPassedFloorPercept(time, id, car, floor))
    }

    protected override onFloorRequested(id : int, time : long, floor : int,
        car : int) throws IOException 
    {
        agentSpace.emit(new FloorRequestPercept(time, id, car, floor))
    }



}
