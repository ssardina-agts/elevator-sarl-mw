/**
 * 
 */
package au.edu.rmit.agtgrp.elevatorsim.sarlmw.skills

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.capacities.Cap_SimulatorInteraction

import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarArrivedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarPassedFloorPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.CarRequestPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.DoorClosedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.DoorOpenedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.DoorSensorClearedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.FloorRequestPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.ModelChangePercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.PersonEnteredPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.PersonExitedPercept
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.SendCarAction
import au.edu.rmit.agtgrp.elevatorsim.sarlmw.events.SimulationEnd 

import au.edu.rmit.agtgrp.elevatorsim.net.ClientElevatorSimulator
import au.edu.rmit.agtgrp.elevatorsim.net.ModelHolder
import au.edu.rmit.agtgrp.elevatorsim.net.NetworkConnection

import io.sarl.lang.SARLVersion
import io.sarl.core.Logging
import io.sarl.core.ExternalContextAccess

import io.sarl.lang.core.EventSpace

import java.io.IOException

/**
 * Allows for basic/general interactions
 * with the Elevator Simulator
 * This includes translating the outputs of the
 * JSON based ClientElevatorSimulator into SARL events,
 * and allowing for the submission of actions
 * for processing by the Elevator Simulator
 * @author Matthew McNally
 * @author Sebastian Sardina (ssardina@gmail.com)
 */
skill Skill_SingleSimulatorInteraction extends ClientElevatorSimulator
    implements Cap_SimulatorInteraction
{
    uses Logging

	uses ExternalContextAccess // SARL compiler will uses the emit function from the capacity that calls the emit function (with 3 parameters) of the space for you.
//	uses DefaultContextInteractions  // Functions to interact with the default context, and its default space
    
    // Space where elevator events should be emitted
    private var agentSpace : EventSpace
    
    // Address of the elevator simulator
	protected var host : String
	protected var port : int



    public new(host : String, port : int, agentSpace : EventSpace)
        throws IOException
    {
		super(null)
		this.host = host
		this.port = port
		this.agentSpace = agentSpace
	}

	/*
	 * Implementation of actions
	 */
	def act_connectToSimulator(address : String, port : int) {
		this.host = host
		this.port = port
		act_connectToSimulator()
	}

	def act_connectToSimulator() {
		registerConnection(new NetworkConnection(this.host, this.port))
		this.start()
	}

	def sendCar(action : SendCarAction) {
		try {
			sendCar(action.car, action.floor, action.nextDirection.name, null, null)
		} catch (e : IOException) {
			error("Failed to enact given simulator action ('SendCar')")
        }
    }






	/*
	 * The following calls back emit corresponding SARL events for each network message received from simulator
	 * 
	 * Each of the methods below is called after receiving and decoding a JSON message from simulator 
	 */
    protected override onModelChanged(id : int, time : long, newModel : ModelHolder) 
        throws IOException {
//		agentSpace.emit(new ModelChangePercept(time, id, newModel))
		emit(agentSpace, new ModelChangePercept(time, id, newModel))
	}

    protected override onCarRequested(id : int, time : long, floor : int, 
        direction : String) throws IOException
    {
		emit(agentSpace, new CarRequestPercept(time, id, floor, direction))
    }

    protected override onDoorOpened(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        emit(agentSpace,new DoorOpenedPercept(time, id, car, floor))
    }

    protected override onDoorClosed(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        emit(agentSpace,new DoorClosedPercept(time, id, car, floor))
    }

    protected override onDoorSensorClear(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        emit(agentSpace,new DoorSensorClearedPercept(time, id, car, floor))
    }
    
    protected override onCarArrived(id : int, time : long, floor : int, 
        car : int) throws IOException 
    {
        emit(agentSpace,new CarArrivedPercept(time, id, car, floor))
    }

    protected override onPersonEnteredCar(id : int, time : long, car : int) 
        throws IOException
    {
        emit(agentSpace,new PersonEnteredPercept(time, id, car))
    }

    protected override onPersonLeftCar(id : int, time : long, car : int) 
        throws IOException
    {
        emit(agentSpace,new PersonExitedPercept(time, id, car))
    }

    protected override onFloorPassed(id : int, time : long, floor : int,
        car : int) throws IOException 
    {
        emit(agentSpace,new CarPassedFloorPercept(time, id, car, floor))
    }

    protected override onFloorRequested(id : int, time : long, floor : int,
        car : int) throws IOException 
    {
        emit(agentSpace,new FloorRequestPercept(time, id, car, floor))
    }

	protected override onSimulationEnd(id : int, time : long) throws IOException {
		emit(agentSpace, new SimulationEnd(time, id))
	}


}
